// @generated
// This file is @generated by prost-build.
/// PubKey is an bls12381 public key for aggregated
/// It's needed for Any serialization and SDK compatibility.
/// It must not be used in a non Tendermint key context because it doesn't implement
/// ADR-28. Nevertheless, you will like to use bls12381 in app user level
/// then you must create a new proto message and follow ADR-28 for Address construction.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PubKey {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for PubKey {
    const NAME: &'static str = "PubKey";
    const PACKAGE: &'static str = "cosmos.crypto.bls12381";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.crypto.bls12381.PubKey".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.crypto.bls12381.PubKey".into()
    }
}
/// PrivKey defines a bls12381 private key.
/// NOTE: bls12381 keys must not be used in SDK apps except in a tendermint validator context.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PrivKey {
    #[prost(bytes = "vec", tag = "1")]
    pub key: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for PrivKey {
    const NAME: &'static str = "PrivKey";
    const PACKAGE: &'static str = "cosmos.crypto.bls12381";
    fn full_name() -> ::prost::alloc::string::String {
        "cosmos.crypto.bls12381.PrivKey".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/cosmos.crypto.bls12381.PrivKey".into()
    }
}
include!("cosmos.crypto.bls12381.serde.rs");
// @@protoc_insertion_point(module)
